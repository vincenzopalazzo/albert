/// parser crate to implement the core implementation
/// of the Yaml parser
///
/// author: https://github.com/vincenzopalazzo
use std::vec::Vec;

use super::tokens::{YamlObject, YamlScope};
use super::YamlParser;
use crate::scanner::tokens::YamlToken;

pub struct Parser {
    ir: Vec<YamlObject>,
    current_pos: u32,
}

/// Core implementation of the Yaml Parser.
impl Parser {
    fn new() -> Self {
        Parser {
            ir: vec![],
            current_pos: 0,
        }
    }

    /// Walk through the list of tokens
    fn walk(&mut self, tokens: &Vec<YamlToken>) {
        while !self.is_the_end(tokens) {
            let yaml_doc = self.parse_document(tokens);
            self.add_to_ir(yaml_doc);
        }
    }

    fn parse_document(&mut self, tokens: &Vec<YamlToken>) -> YamlObject {
        YamlObject::Comment("TODO: implementing the document parsing".to_string())
    }

    /// Add the yaml node to the list of Yaml node
    /// collected from the parser
    // TODO: find the error here generated by the & of the yaml_node
    // it is related to the copy but I don't know much
    fn add_to_ir(&mut self, yaml_node: YamlObject) {
        self.ir.push(yaml_node);
    }

    /// Check for scope definition in the tokens stream
    /// and return a flag with the scope that the parser found
    fn parse_scope(&self, tokens: &Vec<YamlToken>) -> YamlScope {
        YamlScope::InvalidScope("TODO: implement this part".to_string())
    }

    /// Take the next element in the stream, and increase the current position
    /// of it.
    fn next<'a>(&'a mut self, tokens: &'a Vec<YamlToken>) -> &'a YamlToken {
        self.current_pos += 1;
        &tokens[self.current_pos as usize]
    }

    /// Take the element at the current position of the stream.
    fn take<'a>(&'a self, tokens: &'a Vec<YamlToken>) -> &'a YamlToken {
        &tokens[self.current_pos as usize]
    }

    fn is_the_end(&self, tokens: &Vec<YamlToken>) -> bool {
        tokens[self.current_pos as usize] == YamlToken::EOF
    }
}

/// Common implementation of the Yaml Parser
impl YamlParser<YamlObject> for Parser {
    fn parse(&mut self, tokens: &Vec<YamlToken>) -> &Vec<YamlObject> {
        self.walk(tokens);
        &self.ir
    }
}
